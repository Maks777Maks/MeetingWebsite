{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\User\\\\Desktop\\\\SiteMeeting\\\\MeetingWebsite\\\\MeetingWebsite\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport update from '../../../helpers/update';\nimport LoginService from './LoginService';\nimport isEmpty from 'lodash/isEmpty';\nimport setAuthorizationToken from '../../../utils/setAuthorizationToken';\nimport jwt from 'jsonwebtoken';\nimport redirectStatusCode from '../../../services/redirectStatusCode';\nimport history from '../../../utils/history';\nexport var LOGIN_POST_STARTED = \"login/LOGIN_POST_STARTED\";\nexport var LOGIN_POST_SUCCESS = \"login/LOGIN_POST_SUCCESS\";\nexport var LOGIN_POST_FAILED = \"login/LOGIN_POST_FAILED\";\nexport var LOGIN_SET_CURRENT_USER = \"login/SET_CURRENT_USER\";\nvar initialState = {\n  post: {\n    loading: false,\n    success: false,\n    failed: false,\n    errors: {}\n  },\n  isAuthenticated: false,\n  user: {\n    id: '',\n    name: '',\n    image: '',\n    roles: []\n  }\n};\nexport var loginReducer = function loginReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newState = state;\n\n  switch (action.type) {\n    case LOGIN_POST_STARTED:\n      {\n        newState = update.set(state, 'post.loading', true);\n        newState = update.set(newState, 'post.success', false);\n        newState = update.set(newState, 'post.errors', {});\n        newState = update.set(newState, 'post.failed', false);\n        break;\n      }\n\n    case LOGIN_SET_CURRENT_USER:\n      {\n        return _objectSpread({}, state, {\n          isAuthenticated: !isEmpty(action.user),\n          user: action.user\n        });\n      }\n\n    case LOGIN_POST_SUCCESS:\n      {\n        newState = update.set(state, 'post.loading', false);\n        newState = update.set(newState, 'post.failed', false);\n        newState = update.set(newState, 'post.errors', {});\n        newState = update.set(newState, 'post.success', true);\n        break;\n      }\n\n    case LOGIN_POST_FAILED:\n      {\n        newState = update.set(state, 'post.loading', false);\n        newState = update.set(newState, 'post.success', false);\n        newState = update.set(newState, 'post.errors', action.errors);\n        newState = update.set(newState, 'post.failed', true);\n        break;\n      }\n\n    default:\n      {\n        return newState;\n      }\n  }\n\n  return newState;\n};\nexport var login = function login(model) {\n  return function (dispatch) {\n    dispatch(loginActions.started());\n    LoginService.login(model).then(function (response) {\n      dispatch(loginActions.success());\n      loginByJWT(response.data, dispatch);\n      var pushUrl = getUrlToRedirect();\n      console.log(\"----PushUrl----\", pushUrl);\n      history.push(pushUrl);\n    }, function (err) {\n      throw err;\n    }).catch(function (err) {\n      dispatch(loginActions.failed(err.response));\n      redirectStatusCode(err.response.status);\n    });\n  };\n};\n\nfunction getUrlToRedirect() {\n  var user = jwt.decode(localStorage.jwtToken);\n  var roles = user.roles;\n  var path = '';\n\n  if (Array.isArray(roles)) {\n    for (var i = 0; i < roles.length; i++) {\n      if (roles[i] == \"User\") {\n        path = \"/admin\";\n        break;\n      } else if (roles[i] == \"Admin\") {\n        path = \"/admin\";\n        break;\n      }\n    }\n  } else {\n    if (roles == \"User\") {\n      path = \"/admin\";\n    } else if (roles == \"Admin\") {\n      path = \"/admin\";\n    }\n  }\n\n  console.log(\"++++++++++Exit++++++++++\", path);\n  return path;\n}\n\nexport var loginActions = {\n  started: function started() {\n    return {\n      type: LOGIN_POST_STARTED\n    };\n  },\n  success: function success() {\n    return {\n      type: LOGIN_POST_SUCCESS\n    };\n  },\n  failed: function failed(response) {\n    return {\n      type: LOGIN_POST_FAILED,\n      errors: response.data\n    };\n  },\n  setCurrentUser: function setCurrentUser(user) {\n    console.log('LOGIN_SET_CURRENT_USER: ', user);\n    return {\n      type: LOGIN_SET_CURRENT_USER,\n      user: user\n    };\n  }\n};\nexport function logout() {\n  return function (dispatch) {\n    logoutByJWT(dispatch);\n  };\n}\nexport var loginByJWT = function loginByJWT(tokens, dispatch) {\n  var token = tokens.token,\n      refToken = tokens.refToken;\n  console.log('Hello app Token: ', token);\n  var user = jwt.decode(token);\n  console.log('Hello app User: ', user);\n\n  if (!Array.isArray(user.roles)) {\n    user.roles = Array.of(user.roles);\n  }\n\n  localStorage.setItem('jwtToken', token);\n  localStorage.setItem('refreshToken', refToken);\n  setAuthorizationToken(token);\n  dispatch(loginActions.setCurrentUser(user));\n};\nexport var logoutByJWT = function logoutByJWT(dispatch) {\n  localStorage.removeItem('jwtToken');\n  localStorage.removeItem('refreshToken');\n  setAuthorizationToken(false);\n  dispatch(loginActions.setCurrentUser({}));\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/SiteMeeting/MeetingWebsite/MeetingWebsite/Frontend/src/components/pages/login/reducer.js"],"names":["update","LoginService","isEmpty","setAuthorizationToken","jwt","redirectStatusCode","history","LOGIN_POST_STARTED","LOGIN_POST_SUCCESS","LOGIN_POST_FAILED","LOGIN_SET_CURRENT_USER","initialState","post","loading","success","failed","errors","isAuthenticated","user","id","name","image","roles","loginReducer","state","action","newState","type","set","login","model","dispatch","loginActions","started","then","response","loginByJWT","data","pushUrl","getUrlToRedirect","console","log","push","err","catch","status","decode","localStorage","jwtToken","path","Array","isArray","i","length","setCurrentUser","logout","logoutByJWT","tokens","token","refToken","of","setItem","removeItem"],"mappings":"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","sourcesContent":["import update from '../../../helpers/update';\r\nimport LoginService from './LoginService';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport setAuthorizationToken from '../../../utils/setAuthorizationToken';\r\nimport jwt from 'jsonwebtoken';\r\nimport redirectStatusCode from '../../../services/redirectStatusCode';\r\nimport history from '../../../utils/history';\r\n\r\nexport const LOGIN_POST_STARTED = \"login/LOGIN_POST_STARTED\";\r\nexport const LOGIN_POST_SUCCESS = \"login/LOGIN_POST_SUCCESS\";\r\nexport const LOGIN_POST_FAILED = \"login/LOGIN_POST_FAILED\";\r\nexport const LOGIN_SET_CURRENT_USER = \"login/SET_CURRENT_USER\";\r\n\r\n\r\nconst initialState = {\r\n    post: {\r\n        loading: false,\r\n        success: false,\r\n        failed: false,\r\n        errors: {}\r\n    },\r\n    isAuthenticated: false,\r\n    user: {\r\n      id: '',\r\n      name: '',\r\n      image:'',\r\n      roles: []\r\n    }\r\n}\r\n\r\nexport const loginReducer = (state = initialState, action) => {\r\n  let newState = state;\r\n\r\n  switch (action.type) {\r\n\r\n      case LOGIN_POST_STARTED: {\r\n          newState = update.set(state, 'post.loading', true);\r\n          newState = update.set(newState, 'post.success', false);\r\n          newState = update.set(newState, 'post.errors', {});\r\n          newState = update.set(newState, 'post.failed', false);\r\n          break;\r\n      }\r\n      case LOGIN_SET_CURRENT_USER: {\r\n          return {\r\n              ...state,\r\n              isAuthenticated: !isEmpty(action.user),\r\n              user: action.user\r\n          };\r\n      }\r\n      case LOGIN_POST_SUCCESS: {\r\n          newState = update.set(state, 'post.loading', false);\r\n          newState = update.set(newState, 'post.failed', false);\r\n          newState = update.set(newState, 'post.errors', {});\r\n          newState = update.set(newState, 'post.success', true);\r\n          break;\r\n      }\r\n      case LOGIN_POST_FAILED: {\r\n          newState = update.set(state, 'post.loading', false);\r\n          newState = update.set(newState, 'post.success', false);\r\n          newState = update.set(newState, 'post.errors', action.errors);\r\n          newState = update.set(newState, 'post.failed', true);\r\n          break;\r\n      }\r\n      default: {\r\n          return newState;\r\n      }\r\n  }\r\n\r\n  return newState;\r\n}\r\n\r\nexport const login = (model) => {\r\n  return (dispatch) => {\r\n      dispatch(loginActions.started());\r\n      LoginService.login(model)\r\n          .then((response) => {\r\n              dispatch(loginActions.success());\r\n              loginByJWT(response.data, dispatch);\r\n              const pushUrl = getUrlToRedirect();\r\n              console.log(\"----PushUrl----\", pushUrl);\r\n              history.push(pushUrl);\r\n\r\n          }, err=> { throw err; })\r\n          .catch(err=> {\r\n            dispatch(loginActions.failed(err.response));\r\n            redirectStatusCode(err.response.status);\r\n          });\r\n  }\r\n}\r\n\r\nfunction getUrlToRedirect () {\r\n\r\n  var user = jwt.decode(localStorage.jwtToken);\r\n  let roles = user.roles;\r\n  let path = '';\r\n  if (Array.isArray(roles)) {\r\n    for (let i = 0; i < roles.length; i++) {\r\n     \r\n      if (roles[i] == \"User\") {      \r\n        path = \"/admin\";\r\n        break;\r\n      }\r\n      else if (roles[i] == \"Admin\") {        \r\n        path = \"/admin\";\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    if (roles == \"User\") {\r\n      path = \"/admin\";\r\n    }\r\n    else if (roles == \"Admin\") {\r\n      path = \"/admin\";\r\n    }\r\n  }\r\n  console.log(\"++++++++++Exit++++++++++\", path);\r\n  return path;\r\n}\r\n\r\n\r\nexport const loginActions = {\r\n  started: () => {\r\n      return {\r\n          type: LOGIN_POST_STARTED\r\n      }\r\n  },\r\n\r\n  success: () => {\r\n      return {\r\n          type: LOGIN_POST_SUCCESS\r\n      }\r\n  },\r\n\r\n  failed: (response) => {\r\n      return {\r\n          type: LOGIN_POST_FAILED,\r\n          errors: response.data\r\n      }\r\n  },\r\n\r\n  setCurrentUser: (user) => {\r\n    console.log('LOGIN_SET_CURRENT_USER: ', user);\r\n      return {\r\n          type: LOGIN_SET_CURRENT_USER,\r\n          user\r\n      }\r\n  }\r\n}\r\n\r\nexport function logout() {\r\n  return dispatch => {\r\n      logoutByJWT(dispatch);\r\n  };\r\n}\r\n\r\n\r\nexport const loginByJWT = (tokens, dispatch) => {\r\n  const {token, refToken}=tokens;\r\n  console.log('Hello app Token: ', token);\r\n  var user = jwt.decode(token);\r\n  console.log('Hello app User: ', user);\r\n  if (!Array.isArray(user.roles)) {\r\n      user.roles = Array.of(user.roles);\r\n  }\r\n  localStorage.setItem('jwtToken', token);\r\n  localStorage.setItem('refreshToken', refToken);\r\n  setAuthorizationToken(token);\r\n  dispatch(loginActions.setCurrentUser(user));\r\n}\r\n\r\nexport const logoutByJWT = (dispatch) => {\r\n  localStorage.removeItem('jwtToken');\r\n  localStorage.removeItem('refreshToken');\r\n  setAuthorizationToken(false);\r\n  dispatch(loginActions.setCurrentUser({}));\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}