{"ast":null,"code":"import update from '../../helpers/update';\nimport BoysService from './BoysService';\nexport var BOYS_STARTED = \"BOYS_STARTED\";\nexport var BOYS_SUCCESS = \"BOYS_SUCCESS\";\nexport var BOYS_FAILED = \"BOYS_FAILED\";\nvar initialState = {\n  list: {\n    data: [],\n    getZodiacs: [],\n    getCities: [],\n    currentPage: 1,\n    totalCount: 0,\n    loading: false,\n    success: false,\n    failed: false\n  }\n};\nexport var getBoysData = function getBoysData(model) {\n  return function (dispatch) {\n    dispatch(getListActions.started());\n    BoysService.boys(model).then(function (response) {\n      console.log(\"+++++++++++Response\", response);\n      dispatch(getListActions.success(response.data));\n    }, function (err) {\n      throw err;\n    }).catch(function (err) {\n      dispatch(getListActions.failed(err.response));\n    });\n  };\n};\nexport var getListActions = {\n  started: function started() {\n    return {\n      type: BOYS_STARTED\n    };\n  },\n  success: function success(data) {\n    console.log(\"+++++++++++Data\", data);\n    return {\n      type: BOYS_SUCCESS,\n      payload: data\n    };\n  },\n  failed: function failed(response) {\n    console.log(\"failed: (response)\", response);\n    return {\n      type: BOYS_FAILED //errors: response.data\n\n    };\n  }\n};\nexport var boysReducer = function boysReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var newState = state;\n\n  switch (action.type) {\n    case BOYS_STARTED:\n      {\n        newState = update.set(state, 'list.loading', true);\n        newState = update.set(newState, 'list.success', false);\n        newState = update.set(newState, 'list.failed', false);\n        break;\n      }\n\n    case BOYS_SUCCESS:\n      {\n        newState = update.set(state, 'list.loading', false);\n        newState = update.set(newState, 'list.failed', false);\n        newState = update.set(newState, 'list.success', true);\n        newState = update.set(newState, 'list.data', action.payload);\n        console.log(\"BOYS_SUCCESS)\", action.payload);\n        break;\n      }\n\n    case BOYS_FAILED:\n      {\n        newState = update.set(state, 'list.loading', false);\n        newState = update.set(newState, 'list.success', false);\n        newState = update.set(newState, 'list.failed', true);\n        break;\n      }\n\n    default:\n      {\n        return newState;\n      }\n  }\n\n  return newState;\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/SiteMeeting/MeetingWebsite/MeetingWebsite/Frontend/src/components/boys/reducer.js"],"names":["update","BoysService","BOYS_STARTED","BOYS_SUCCESS","BOYS_FAILED","initialState","list","data","getZodiacs","getCities","currentPage","totalCount","loading","success","failed","getBoysData","model","dispatch","getListActions","started","boys","then","response","console","log","err","catch","type","payload","boysReducer","state","action","newState","set"],"mappings":"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","sourcesContent":["import update from '../../helpers/update';\r\nimport BoysService from './BoysService';\r\n\r\n\r\nexport const BOYS_STARTED = \"BOYS_STARTED\";\r\nexport const BOYS_SUCCESS = \"BOYS_SUCCESS\";\r\nexport const BOYS_FAILED = \"BOYS_FAILED\";\r\n\r\n\r\nconst initialState = {\r\n    list: {\r\n        data: [],\r\n        getZodiacs: [],\r\n        getCities: [],\r\n        currentPage: 1,\r\n        totalCount: 0,\r\n        loading: false,\r\n        success: false,\r\n        failed: false,\r\n    },   \r\n}\r\n\r\nexport const getBoysData = (model) => {\r\n    return (dispatch) => {\r\n        dispatch(getListActions.started());\r\n            BoysService.boys(model)\r\n            .then((response) => {\r\n                console.log(\"+++++++++++Response\", response);\r\n                dispatch(getListActions.success(response.data));               \r\n            }, err=> { throw err; })\r\n            .catch(err=> {\r\n              dispatch(getListActions.failed(err.response));\r\n            });\r\n    }\r\n}\r\n\r\nexport const getListActions = {\r\n    started: () => {\r\n        return {\r\n            type: BOYS_STARTED\r\n        }\r\n    },  \r\n    success: (data) => {\r\n        console.log(\"+++++++++++Data\", data);\r\n        return {\r\n            type: BOYS_SUCCESS,\r\n            payload: data\r\n        }\r\n    },  \r\n    failed: (response) => {\r\n        console.log(\"failed: (response)\", response);\r\n        return {           \r\n            type: BOYS_FAILED,\r\n            //errors: response.data\r\n        }\r\n    }\r\n  }\r\n\r\nexport const boysReducer = (state = initialState, action) => { \r\n  let newState = state;\r\n\r\n  switch (action.type) {\r\n\r\n      case BOYS_STARTED: {\r\n          newState = update.set(state, 'list.loading', true);\r\n          newState = update.set(newState, 'list.success', false);\r\n          newState = update.set(newState, 'list.failed', false);\r\n          break;\r\n      }\r\n      case BOYS_SUCCESS: {\r\n          newState = update.set(state, 'list.loading', false);\r\n          newState = update.set(newState, 'list.failed', false);\r\n          newState = update.set(newState, 'list.success', true);\r\n          newState = update.set(newState, 'list.data', action.payload);\r\n          console.log(\"BOYS_SUCCESS)\", action.payload);\r\n\r\n          break;\r\n      }\r\n      case BOYS_FAILED: {\r\n          newState = update.set(state, 'list.loading', false);\r\n          newState = update.set(newState, 'list.success', false);\r\n          newState = update.set(newState, 'list.failed', true);\r\n          break;\r\n      }\r\n      default: {\r\n          return newState;\r\n      }\r\n  }\r\n  return newState;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}